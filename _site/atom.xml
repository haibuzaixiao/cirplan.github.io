<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>萝拔</title>
 <link href="jeffdeng.me/" rel="self"/>
 <link href="jeffdeng.me"/>
 <updated>2015-04-21T15:15:20+08:00</updated>
 <id>jeffdeng.me</id>
 <author>
   <name>dcirplan</name>
   <email>dcirplan@gmail.com</email>
 </author>

 
 <entry>
   <title>2015展望</title>
   <link href="jeffdeng.me/plan/2015/01/08/plan"/>
   <updated>2015-01-08T00:00:00+08:00</updated>
   <id>jeffdeng.me/plan/2015/01/08/plan</id>
   <content type="html">
&lt;p&gt;新的一年，总得写点什么，例如立下些雄心壮志的目标之类。虽然最后往往都是不了了之，但还是可以很装的说一句：立过。&lt;/p&gt;

&lt;p&gt;这一年大目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;做好毕设项目。&lt;/li&gt;
  &lt;li&gt;多看书。&lt;/li&gt;
  &lt;li&gt;多锻炼。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先说说现在的情况。&lt;/p&gt;

&lt;p&gt;毕设已经开始做，采用的是nodejs+mysql+backbone，基本框架已经搭好。但整个流程还没想好，导致数据库的表也还没建完。4月20多号就要做完（今年真的是变态的早），然后答辩。这样一想，时间还是挺紧迫的。赶紧赶紧~&lt;/p&gt;

&lt;p&gt;虽然时间比较紧，首先还是要把功能想清楚的，把流程划分好模块。然后把表建好。再把基本的框架完善，然后堆业务就好了（想的是不是太简单了）。&lt;/p&gt;

&lt;p&gt;然后说看书的吧。14年基本没怎么看书，技术不升反降。现在工作这么久，又懒的看书，都是够用就好（囧~）。&lt;/p&gt;

&lt;p&gt;好把，今年要看100+本书！咳咳，开玩笑的啦。技术书籍的话，就把已经买了的技术书看完就好了。因为我对技术书籍毫无抵抗力啊，每次看到好书就毫不犹豫的买回来，拿到书时候那个开心啊！但是！买回来居然不看，就放在那里养老。然后又把书架堆的满满的！每次别人看到，都一脸膜拜的样子，搞得我超级不好意思哎，一半我都没看过的啊~搞得每次我都想把书藏好！&lt;/p&gt;

&lt;p&gt;然后非技术的书也要看的，买kindle就是为了看这些书的。反正今年的目标就是：看看看~当然，不能为了看书而看书，该思考的还是得思考，该记录的还是得记录。可不能像完成任务一样刷刷刷。&lt;/p&gt;

&lt;p&gt;再说说技术吧，前端今年肯定是要搞的比较通透了的，毕竟接触前端也有三年了差不多，但现在还是属于无脑编码型。很多东西没有去总结，就一直没有得到应有的提高。懒得要命的毛病，今年得改~然后nodejs也是要学的，虽然也接触了挺久了，但一直在做简单的小demo，还没有深入去学习，加入自己的理解。数据库也得看，操作系统，算法导论，编译原理等等（一想到这么多的大部头，真不知道自己为啥那么高兴的买回来）。总得来说，还是得定下心来，去看书，去实践。&lt;/p&gt;

&lt;p&gt;锻炼的话，多跑步，多爬山。少吃零食，多睡觉。就酱。&lt;/p&gt;

&lt;p&gt;希望到了2016，总结我的2015，是：充实+技术。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2014年回顾</title>
   <link href="jeffdeng.me/plan/2015/01/04/year-review"/>
   <updated>2015-01-04T00:00:00+08:00</updated>
   <id>jeffdeng.me/plan/2015/01/04/year-review</id>
   <content type="html">
&lt;p&gt;2015年匆匆的赶来了，100秒钟都不多给，好坏的。&lt;/p&gt;

&lt;p&gt;时间过的，一般快。对于过得充实的人来说，时间还好，游刃有余。对于我，
时间就像把我牢牢绑在几百万牛顿推力的火箭上，一路上了拉着我啊啊啊啊的往前冲，或者有时候
还没啊出来，时间就把我带过去了。一回头，发现离原地越来越远。好吧，又扯淡了。&lt;/p&gt;

&lt;p&gt;先看看&lt;a href=&quot;/2014/02/20/plan.html&quot;&gt;14年的计划&lt;/a&gt;，这篇文章是14年2月20号写的。不知不觉写了快一年，感觉就像在昨天，好快啊。又扯淡了，打手！&lt;/p&gt;

&lt;p&gt;14年的计划是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;换mx3，买kindle，买台1500左右的山地车，买台mac pro，去海南环岛。&lt;/li&gt;
    &lt;li&gt;锻炼身体，走百公里。&lt;/li&gt;
    &lt;li&gt;奋斗。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;那一年过去了，哪些实现了？你觉得哪些可以实现？上面说买各种东西说的是用自己赚的钱买的。说这个的时候才大三开学，对前途一片渺茫。我都不知道怎么突然会有这样的想法。当时和我姐说过，我姐轻轻的说，不现实~其实有愿望还是好的，如果最后没有实现，但这个愿望毕竟在一段时间里给过你力量。&lt;/p&gt;

&lt;p&gt;恩，结果是没有买mx3，不过买了mx4，kindle也买了。山地车没有买，也没有去海南环岛（好遗憾）。mac pro 也准备买了，就等等师兄过HK（我没有办通行证啊摔）。&lt;/p&gt;

&lt;p&gt;然后3月份开始还是有锻炼的，然后去走了传说中百公里。对于我这样虚弱的存在，你觉得走了多少公里呢？什么，至少99公里？恩，我计划也是这样的。然后事实是~~走了40多公里而已，从深圳湾开始一直走到梧桐山。从晚上6点左右出发，一直走到第二天早上7点多。虽然大脑一直在鞭笞我前进前进前进，但腿还是很诚实的啊，牢牢的粘在地上迈不起来，捂脸。&lt;/p&gt;

&lt;p&gt;由于第一次，没经验，走到最后凌晨3、4点的时候真的好累好累，又饿，腿一动就疼，这个时候真的好想家啊！我要妈妈，我要回家！当时真想挂在树上不走了，但又是在偏僻的地方，不走下去没人接啊。只能继续迈着小短腿，扭着小屁股左摇右摆的挪下去。不过，万幸的是脚没有出泡泡，也没有抽筋。然后也没有低血糖的感觉（还是年轻过的，虽然经常低血糖，囧）。&lt;/p&gt;

&lt;p&gt;其实后来想想，还是很害怕的，因为如果有什么突发意外，腿抽筋啊什么的，真的完全没有考虑到。后来那么累，又没有实物补充，要是晕倒怎么办。只能说，不想那么多反而没问题。年轻就是战胜一切的法宝。&lt;/p&gt;

&lt;p&gt;还有就是回来的时候坐公交，超级多人，还要排队，都累趴了还排队？没办法，只能一脸要死的样子像僵尸一样跟在队伍后面。上了公交还要站，好吧，看到外面还在排队的人，我认了。还好到了地铁就有位置了。迷迷糊糊瞌睡了一路~记得当时有个小女孩，用她很好奇的眼睛看着我们打瞌睡的样子，觉得好困惑呢。哈哈~&lt;/p&gt;

&lt;p&gt;然后暑假到现在，基本是没什么运动了。自从实习了，肚腩也越发嚣张！摔摔摔！&lt;/p&gt;

&lt;p&gt;然后就考完试就到暑假啦，啦啦啦~终于不用上课了。最重要的是，这个学期不仅把挂的课修回来，还没有挂科。对于每个学期必挂一科的我，真的很难得。&lt;/p&gt;

&lt;p&gt;然后就出去找实习了。恩，还不错，之前有个来学校校招，招应届毕业生做H5的，但我凭借出色的人格魅力征服了他们，最后还是同意让我去实习（其实面试得一塌糊涂）。但由于公司和我预期有点出入，最后还是没有去。&lt;/p&gt;

&lt;p&gt;然后去了另外一家创业公司。去这家公司真的很巧合，因为我是在技术论坛上找的。那个时候，我还年轻，经常逛技术论坛，哦，看的最多的是当然八卦事情。然后加入了个技术QQ群，然后公司的老板在里面招人，我就顺理成章的进来了。后来，做了一个半月，到8月31号，公司资金撑不住了，终于要倒闭了。好伤感，那一瞬~后来大家一起看了个《分手大师》，吃了顿饭就说拜拜了。伤感~还是珍惜现在和你一起奋斗的人吧，说不定什么时候就说拜拜了。&lt;/p&gt;

&lt;p&gt;没了工作，就在宿舍宅了十几天。专心做全宇宙最宅的宅男。因为8月尾的时候，做了阿里的网上测试，通知过广州面试。但觉得自己技术一般般，又懒的过去就拒了。这个时候应该有点伤感。&lt;/p&gt;

&lt;p&gt;后来，前公司同事把我叫到了现在这家新的创业公司。又开始每天coding的生活啦~&lt;/p&gt;

&lt;p&gt;恩。国庆的时候，回去拜山。在山上，砍掉杂草的时候，由于早餐没吃饱，运动过快，血糖供应不上，一头栽到地上，断片了。人生第一次断片哦，超激动，原来真有断片~说这个，只是想说经常低血糖的要时刻关注自己身体的情况。发现不对，马上蹲下来。管他那么多，蹲蹲蹲。&lt;/p&gt;

&lt;p&gt;然后12月末的时候，和以前实验室的童鞋去了惠东玩了两天一夜。不用花钱哦~好把，是别人团购多出来的位置，让我占便宜了。哈哈~感觉惠东的海好漂亮哦。那个双月湾真的很不错哦。不过其他地方就一般般了。去的第二天好像是妈祖出海庆典，好像是60年一次。好把，远远眺望了几眼就走了~&lt;/p&gt;

&lt;p&gt;这一年，基本没看什么书（惭愧，摔摔摔）。
下面是看过的(我都有实体书)：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;活法 稻盛和夫&lt;/li&gt;
  &lt;li&gt;因为疼痛所以叫青春&lt;/li&gt;
  &lt;li&gt;1988我想和这个世界谈谈&lt;/li&gt;
  &lt;li&gt;这些道理没人告诉你&lt;/li&gt;
  &lt;li&gt;浪潮之巅&lt;/li&gt;
  &lt;li&gt;形式感 网页视觉设计创意拓展与快速表现&lt;/li&gt;
  &lt;li&gt;设计师要懂心理学&lt;/li&gt;
  &lt;li&gt;超越平凡的平面设计 版式设计原理与应用&lt;/li&gt;
  &lt;li&gt;Nodejs开发指南&lt;/li&gt;
  &lt;li&gt;深入浅出Nodejs&lt;/li&gt;
  &lt;li&gt;MongoDB权威指南&lt;/li&gt;
  &lt;li&gt;javascript编程精解&lt;/li&gt;
  &lt;li&gt;精彩绝伦的css&lt;/li&gt;
  &lt;li&gt;HTML5程序设计&lt;/li&gt;
  &lt;li&gt;疯狂Android讲义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他还有一些就忘记了，借图书馆的书，还了就忘记了（这记忆力，是病，得治）。上面这些也很多忘记了。想想都好惭愧，一年这么久居然就看这么几本书~&lt;/p&gt;

&lt;p&gt;当然，还看了好多好多无聊的小说，上课无聊嘛，总要消磨时间（是不是暴露什么了）。&lt;/p&gt;

&lt;p&gt;总的来说，2014，挺好。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>java的urlrewritefilter简单使用</title>
   <link href="jeffdeng.me/java/2014/12/12/java-urlrewritefilter"/>
   <updated>2014-12-12T00:00:00+08:00</updated>
   <id>jeffdeng.me/java/2014/12/12/java-urlrewritefilter</id>
   <content type="html">
&lt;p&gt;由于项目中只用了&lt;code&gt;tomcat&lt;/code&gt;，没有用&lt;code&gt;Apache&lt;/code&gt;，然后想做&lt;code&gt;www&lt;/code&gt;重定向。就如让所有访问&lt;code&gt;baidu.com&lt;/code&gt;都301永久重定向到&lt;code&gt;www.baidu.com&lt;/code&gt;。然后时间紧急，对&lt;code&gt;Apache&lt;/code&gt;不是很熟悉（懒的去配置），就直接用了&lt;code&gt;java&lt;/code&gt;的一个包：
&lt;code&gt;urlrewritefilter&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;官网是：&lt;a href=&quot;http://tuckey.org/urlrewrite/&quot;&gt;http://tuckey.org/urlrewrite/&lt;/a&gt;。使用方法也很简单，这里简单说下。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.下载&lt;/h3&gt;
&lt;p&gt;先去下载&lt;code&gt;urlrewritefilter-x.x.x.jar &lt;/code&gt;包。下载好放到&lt;code&gt;WEB-INF/lib&lt;/code&gt;目录下。&lt;/p&gt;

&lt;h3 id=&quot;webxml&quot;&gt;2.配置web.xml&lt;/h3&gt;
&lt;p&gt;修改web.xml，把下面代码放到所有servlet mappings的前面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;UrlRewriteFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;org.tuckey.web.filters.urlrewrite.UrlRewriteFilter&amp;lt;/filter-class&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;UrlRewriteFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;dispatcher&amp;gt;REQUEST&amp;lt;/dispatcher&amp;gt;
    &amp;lt;dispatcher&amp;gt;FORWARD&amp;lt;/dispatcher&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里是对应的参数文档 &lt;a href=&quot;http://urlrewritefilter.googlecode.com/svn/trunk/src/doc/manual/4.0/index.html#filterparams&quot;&gt;filterparams&lt;/a&gt;。这就配置完了（这里有个很坑爹的问题，待会说）。&lt;/p&gt;

&lt;h3 id=&quot;urlrewritexml&quot;&gt;3.增加 &lt;code&gt;urlrewrite.xml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;然后在 &lt;code&gt;WEB-INF&lt;/code&gt; 文件夹里增加多 &lt;code&gt;urlrewrite.xml&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;下面是官方标准urlrewrite.xml文档：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE urlrewrite PUBLIC &quot;-//tuckey.org//DTD UrlRewrite 4.0//EN&quot;
        &quot;http://www.tuckey.org/res/dtds/urlrewrite4.0.dtd&quot;&amp;gt;

&amp;lt;!--

    Configuration file for UrlRewriteFilter
    http://www.tuckey.org/urlrewrite/

--&amp;gt;
&amp;lt;urlrewrite&amp;gt;

    &amp;lt;rule&amp;gt;
        &amp;lt;note&amp;gt;
            The rule means that requests to /test/status/ will be redirected to /rewrite-status
            the url will be rewritten.
        &amp;lt;/note&amp;gt;
        &amp;lt;from&amp;gt;/test/status/&amp;lt;/from&amp;gt;
        &amp;lt;to type=&quot;redirect&quot;&amp;gt;%{context-path}/rewrite-status&amp;lt;/to&amp;gt;
    &amp;lt;/rule&amp;gt;


    &amp;lt;outbound-rule&amp;gt;
        &amp;lt;note&amp;gt;
            The outbound-rule specifies that when response.encodeURL is called (if you are using JSTL c:url)
            the url /rewrite-status will be rewritten to /test/status/.

            The above rule and this outbound-rule means that end users should never see the
            url /rewrite-status only /test/status/ both in thier location bar and in hyperlinks
            in your pages.
        &amp;lt;/note&amp;gt;
        &amp;lt;from&amp;gt;/rewrite-status&amp;lt;/from&amp;gt;
        &amp;lt;to&amp;gt;/test/status/&amp;lt;/to&amp;gt;
    &amp;lt;/outbound-rule&amp;gt;


    &amp;lt;!--

    INSTALLATION

        in your web.xml add...

        &amp;lt;filter&amp;gt;
            &amp;lt;filter-name&amp;gt;UrlRewriteFilter&amp;lt;/filter-name&amp;gt;
            &amp;lt;filter-class&amp;gt;org.tuckey.web.filters.urlrewrite.UrlRewriteFilter&amp;lt;/filter-class&amp;gt;
            &amp;lt;init-param&amp;gt;
                &amp;lt;param-name&amp;gt;logLevel&amp;lt;/param-name&amp;gt;
                &amp;lt;param-value&amp;gt;WARN&amp;lt;/param-value&amp;gt;
            &amp;lt;/init-param&amp;gt;
        &amp;lt;/filter&amp;gt;
        &amp;lt;filter-mapping&amp;gt;
            &amp;lt;filter-name&amp;gt;UrlRewriteFilter&amp;lt;/filter-name&amp;gt;
            &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
        &amp;lt;/filter-mapping&amp;gt;

     EXAMPLES

     Redirect one url
        &amp;lt;rule&amp;gt;
            &amp;lt;from&amp;gt;/some/old/page.html&amp;lt;/from&amp;gt;
            &amp;lt;to type=&quot;redirect&quot;&amp;gt;/very/new/page.html&amp;lt;/to&amp;gt;
        &amp;lt;/rule&amp;gt;

    Redirect a directory
        &amp;lt;rule&amp;gt;
            &amp;lt;from&amp;gt;/some/olddir/(.*)&amp;lt;/from&amp;gt;
            &amp;lt;to type=&quot;redirect&quot;&amp;gt;/very/newdir/$1&amp;lt;/to&amp;gt;
        &amp;lt;/rule&amp;gt;

    Clean a url
        &amp;lt;rule&amp;gt;
            &amp;lt;from&amp;gt;/products/([0-9]+)&amp;lt;/from&amp;gt;
            &amp;lt;to&amp;gt;/products/index.jsp?product_id=$1&amp;lt;/to&amp;gt;
        &amp;lt;/rule&amp;gt;
    eg, /products/1234 will be passed on to /products/index.jsp?product_id=1234 without the user noticing.

    Browser detection
        &amp;lt;rule&amp;gt;
            &amp;lt;condition name=&quot;user-agent&quot;&amp;gt;Mozilla/[1-4]&amp;lt;/condition&amp;gt;
            &amp;lt;from&amp;gt;/some/page.html&amp;lt;/from&amp;gt;
            &amp;lt;to&amp;gt;/some/page-for-old-browsers.html&amp;lt;/to&amp;gt;
        &amp;lt;/rule&amp;gt;
    eg, will pass the request for /some/page.html on to /some/page-for-old-browsers.html only for older
    browsers whose user agent srtings match Mozilla/1, Mozilla/2, Mozilla/3 or Mozilla/4.

    Centralised browser detection
        &amp;lt;rule&amp;gt;
            &amp;lt;condition name=&quot;user-agent&quot;&amp;gt;Mozilla/[1-4]&amp;lt;/condition&amp;gt;
            &amp;lt;set type=&quot;request&quot; name=&quot;browser&quot;&amp;gt;moz&amp;lt;/set&amp;gt;
        &amp;lt;/rule&amp;gt;
    eg, all requests will be checked against the condition and if matched
    request.setAttribute(&quot;browser&quot;, &quot;moz&quot;) will be called.

    --&amp;gt;

&amp;lt;/urlrewrite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们经常用到的就两个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; //重定向 地址栏显示的是实际地址
    &amp;lt;rule&amp;gt;
        &amp;lt;from&amp;gt;/some/olddir/(.*)&amp;lt;/from&amp;gt;
        &amp;lt;to type=&quot;redirect&quot;&amp;gt;/very/newdir/$1&amp;lt;/to&amp;gt;
    &amp;lt;/rule&amp;gt;

//转发 地址了显示的是虚拟地址
    &amp;lt;rule&amp;gt;
        &amp;lt;from&amp;gt;/products/([0-9]+)&amp;lt;/from&amp;gt;
        &amp;lt;to&amp;gt;/products/index.jsp?product_id=$1&amp;lt;/to&amp;gt;
    &amp;lt;/rule&amp;gt;
eg, /products/1234 will be passed on to /products/index.jsp?product_id=1234 without the user noticing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;匹配的是java的正则表达式。&lt;/p&gt;

&lt;h3 id=&quot;www301&quot;&gt;4.www301重定向&lt;/h3&gt;
&lt;p&gt;下面就是我要用到的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如果地址的域名不是 www.baidu.com 就会跳转到www.baidu.com
//为了考虑开发情况，把 localhost 也加到里面
&amp;lt;rule&amp;gt;
    &amp;lt;name&amp;gt;seo redirect&amp;lt;/name&amp;gt;
    &amp;lt;condition name=&quot;host&quot; operator=&quot;notequal&quot;&amp;gt;^www.baidu.com&amp;lt;/condition&amp;gt;
    &amp;lt;condition name=&quot;host&quot; operator=&quot;notequal&quot;&amp;gt;^localhost&amp;lt;/condition&amp;gt;
    &amp;lt;from&amp;gt;^/(.*)&amp;lt;/from&amp;gt;
    &amp;lt;to type=&quot;permanent-redirect&quot; last=&quot;true&quot;&amp;gt;http://www.baidu.com/$1&amp;lt;/to&amp;gt;
&amp;lt;/rule&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里为止，一切都正常。但是我用转发却不行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rule&amp;gt;
    &amp;lt;from&amp;gt;/products/([0-9]+)&amp;lt;/from&amp;gt;
    &amp;lt;to&amp;gt;/products/index.jsp?product_id=$1&amp;lt;/to&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问&lt;code&gt;localhost:8080/products/123&lt;/code&gt;一直报&lt;code&gt;404&lt;/code&gt;，而且还是乱码。&lt;/p&gt;

&lt;p&gt;这个问题纠结了好久。&lt;code&gt;api&lt;/code&gt;里也没看到哪里出问题了。最后，终于发现，是转发后被&lt;code&gt;struts&lt;/code&gt;拦截了。所以，要修改&lt;code&gt;web.xml&lt;/code&gt;。在&lt;code&gt;struts2&lt;/code&gt;的&lt;code&gt;&amp;lt;filter-mapping&amp;gt;&lt;/code&gt;里加上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dispatcher&amp;gt;REQUEST&amp;lt;/dispatcher&amp;gt;  
&amp;lt;dispatcher&amp;gt;FORWARD&amp;lt;/dispatcher&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以了。浪费好多时间去弄这个问题，囧~&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://xlaohe1.iteye.com/blog/1130854&quot;&gt;http://xlaohe1.iteye.com/blog/1130854&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fanzhongyun.iteye.com/blog/1221170&quot;&gt;http://fanzhongyun.iteye.com/blog/1221170&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ygf215/article/details/4766285&quot;&gt;http://blog.csdn.net/ygf215/article/details/4766285&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nematodes.org/martin/2010/02/04/301-permanent-redirect-with-tomcat-howto/&quot;&gt;http://nematodes.org/martin/2010/02/04/301-permanent-redirect-with-tomcat-howto/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>译.css选择器渲染优化</title>
   <link href="jeffdeng.me/css/2014/12/08/css-selector"/>
   <updated>2014-12-08T00:00:00+08:00</updated>
   <id>jeffdeng.me/css/2014/12/08/css-selector</id>
   <content type="html">
&lt;p&gt;原文：&lt;a href=&quot;http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/&quot;&gt;css selector performance has changed&lt;/a&gt;。这里来看看这篇文章的主要内容。&lt;/p&gt;

&lt;p&gt;下面是我们之前就知道的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选择器匹配元素是从右到左，应该避免比较艰难匹配的选择器。&lt;/li&gt;
  &lt;li&gt;后代选择器是比较缓慢的，尤其是最右的选择器匹配到大量元素的时候。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;改变的现状：&lt;/p&gt;

&lt;p&gt;Antti Koivisto，是&lt;code&gt;WebKit&lt;/code&gt;代码的贡献者，最近花了一些时间去优化&lt;code&gt;css&lt;/code&gt;的选择器匹配。在完成这项工作后，他说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我的观点是：写代码的人不应该去担心选择器的优化，这应该是浏览器引擎的工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们来看看他在四个方面做的特别优化：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Style Sharing（共享样式）&lt;/li&gt;
  &lt;li&gt;Rule Hashes（哈希规则）&lt;/li&gt;
  &lt;li&gt;Ancestor Filters（父代过滤器）&lt;/li&gt;
  &lt;li&gt;Fast Path（快速路径）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;共享样式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;共享样式允许浏览器根据已经匹配到得元素，快速找出其他相同样式的元素。&lt;/p&gt;

&lt;p&gt;ex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;p&amp;gt;foo&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;bar&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果浏览器引擎已经计算出第一个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;的样式（已经渲染），它就不用再去计算第二个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;的样式，直接渲染就是了（当然这个前提是第一个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;和第二个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;的样式选择器一致，如&lt;code&gt;div p{}
&lt;/code&gt;之类）。这是很简单的一小步，却优化
选择器的一大步。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;哈希规则&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我们现在都知道匹配选择器是从右到左，所以最右边的选择器是很重要的。哈希规则基于最右的选择器来把选择器分组。举个例子，下面的选择器会分成三组。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {}
div p {}
div p.legal {}
#sidebar a {}
#sidebar p {}

1: a, a {}, #sidebar a

2: p, div p {}, #sidebar p {}

3: p.legal , div p.legal {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当浏览器使用哈希规则的时候，它不一定要去查找样式表中所个有的单的选择器，而是分组去匹配。
这对于页面上单个的&lt;code&gt;HTML&lt;/code&gt;元素，同样很巧妙的节省了很多工作。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;父代过滤器&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;父代过滤器是有点复杂的。它们通过计算一个选择器可以匹配的可能性，去过滤，所以也称为可能性过滤器。所以，父代过滤器可以快速排除那些没有匹配的元素。它通过&lt;code&gt;class&lt;/code&gt;,&lt;code&gt;id&lt;/code&gt;,&lt;code&gt;tag&lt;/code&gt;去匹配后代和子选择器。后代选择器是认为匹配比较慢的，因为渲染引擎要循环所有的父节点，尝试选择器是否匹配。这个时候&lt;code&gt;bloom&lt;/code&gt;过滤器就闪亮登场了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bloom&lt;/code&gt;过滤器是一个数据集合，可以让你判断某个选择器是否在集合中.bloom过滤器判断一个
css规则是否是在当前的元素集合中（The bloom filter tests whether a CSS rule is a member of the set of rules which match the element you are currently testing）。这其中很特别的一件事是，误报是有可能的，但漏报是不可能的。这意味着，如果bloom过滤器判断出一个选择器不符合当前的元素，浏览器就会停止查看当前的选择器，跳到下一个选择器。这里又节省了很多时间。如果&lt;code&gt;bloom&lt;/code&gt;过滤器判断出当前的元素匹配，浏览器会继续通过常规的方法去进行100%的准确匹配。样式表文件越大，误报的几率就越大。所以要保持样式表文件的比较近小。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;strong&gt;快速路径&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;快速路径通过内在的循环，而不是递归，去取代常规的匹配逻辑（Fast path re-implements more general matching logic using a non-recursive, fully inlined loop. ）。 它通常用在匹配下面组合的选择器：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;后代，子代，子代选择器组合&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt;，&lt;code&gt;class&lt;/code&gt;和属性组合选择器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上就是Antti对&lt;code&gt;WebKit&lt;/code&gt;引擎的四个优化。(有点高深，不是很懂~囧)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>译.css性能</title>
   <link href="jeffdeng.me/css/2014/12/08/css-performance"/>
   <updated>2014-12-08T00:00:00+08:00</updated>
   <id>jeffdeng.me/css/2014/12/08/css-performance</id>
   <content type="html">
&lt;p&gt;原文：&lt;a href=&quot;https://dl.dropboxusercontent.com/u/39519/talks/cssperf/index.html&quot;&gt;CSS Performance&lt;/a&gt;（2011年文章，有着很赞的翻转效果，前提是祭出高级浏览器）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reflows（重排）&lt;/li&gt;
  &lt;li&gt;Hardware Accelerated Css（硬件加速css）&lt;/li&gt;
  &lt;li&gt;Avoiding Expensive Css（避免高消耗css）&lt;/li&gt;
  &lt;li&gt;Selector Perf（选择器性能）&lt;/li&gt;
  &lt;li&gt;Style Matching Perf（样式匹配性能）&lt;/li&gt;
  &lt;li&gt;Polyfills&lt;/li&gt;
  &lt;li&gt;Debugging（调试）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;&lt;strong&gt;1. 重排&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;先来看看html页面的渲染、绘制流程图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/render.png&quot; alt=&quot;render&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据&lt;code&gt;Html&lt;/code&gt;标签生成&lt;code&gt;Dom&lt;/code&gt;树（&lt;code&gt;Dom tree&lt;/code&gt;）；根据默认的，用户自定义的样式生成样式结构（&lt;code&gt;Styles struct&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;生成渲染树（&lt;code&gt;Render tree&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;绘制页面&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是重排的渲染短视频：&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;&quot; autobuffer=&quot;&quot; width=&quot;860&quot; height=&quot;510&quot;&gt;
	&lt;source src=&quot;https://dl.dropboxusercontent.com/u/39519/talks/cssperf/assets/geckoreflow-mozillaorg.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;source src=&quot;https://dl.dropboxusercontent.com/u/39519/talks/cssperf/assets/geckoreflow-mozillaorg.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;下面，先看看重绘机制：如何（不）触发&lt;code&gt;WebKit&lt;/code&gt;的布局（&lt;a href=&quot;http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html&quot;&gt;How (not) to trigger a layout in WebKit&lt;/a&gt;）（2011）。&lt;/p&gt;

&lt;p&gt;简单译文：&lt;/p&gt;

&lt;p&gt;许多&lt;code&gt;Web&lt;/code&gt;开发者意识到，一段&lt;code&gt;js&lt;/code&gt;脚本在运行的时候，是在触发&lt;code&gt;DOM&lt;/code&gt;的操作而不是执行代码本身。这样一个潜在消耗时间，从&lt;code&gt;Dom&lt;/code&gt;树构建渲染树（&lt;code&gt;Render tree&lt;/code&gt;）的过程，被称作布局（又称重排）。约庞大越复杂的&lt;code&gt;Dom&lt;/code&gt;树，就会消耗更多的时间。&lt;/p&gt;

&lt;p&gt;一个很重要的方法让页面的不假死，就是让分开的Dom操作放在一起。&lt;/p&gt;

&lt;p&gt;ex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 一般，触发两次布局
var newWidth = aDiv.offsetWidth + 10; // Read
aDiv.style.width = newWidth + &#39;px&#39;; // Write
var newHeight = aDiv.offsetHeight + 10; // Read
aDiv.style.height = newHeight + &#39;px&#39;; // Write

// 更好, 只触发一次布局
var newWidth = aDiv.offsetWidth + 10; // Read
var newHeight = aDiv.offsetHeight + 10; // Read
aDiv.style.width = newWidth + &#39;px&#39;; // Write
aDiv.style.height = newHeight + &#39;px&#39;; // Write
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后这里就会有个问题：什么情况会触发布局？下面是整理的一些元素和方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Element
clientHeight, clientLeft, clientTop, clientWidth, focus(), getBoundingClientRect(), getClientRects(), innerText, offsetHeight, offsetLeft, offsetParent, offsetTop, offsetWidth, outerText, scrollByLines(), scrollByPages(), scrollHeight, scrollIntoView(), scrollIntoViewIfNeeded(), scrollLeft, scrollTop, scrollWidth

Frame, Image
height, width

Range
getBoundingClientRect(), getClientRects()

SVGLocatable
computeCTM(), getBBox()

SVGTextContent
getCharNumAtPosition(), getComputedTextLength(), getEndPositionOfChar(), getExtentOfChar(), getNumberOfChars(), getRotationOfChar(), getStartPositionOfChar(), getSubStringLength(), selectSubString()

SVGUse
instanceRoot

window
getComputedStyle(), scrollBy(), scrollTo(), scrollX, scrollY, webkitConvertPointFromNodeToPage(), webkitConvertPointFromPageToNode()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然列出的这些不是全部，这只是一个很好的开始。最好的方法是通过Chrome或者Firefox浏览器的调试器去查看。（翻译完）&lt;/p&gt;

&lt;p&gt;好的，再回到这里，我们看看什么动作会触发重排。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加，删除，更新&lt;code&gt;Dom&lt;/code&gt;节点。&lt;/li&gt;
  &lt;li&gt;通过&lt;code&gt;display:none&lt;/code&gt;隐藏元素。&lt;/li&gt;
  &lt;li&gt;对页面上的&lt;code&gt;Dom&lt;/code&gt;元素进行移动等动画。&lt;/li&gt;
  &lt;li&gt;增加样式，或调整样式属性。&lt;/li&gt;
  &lt;li&gt;用户改变窗口大小，改变字体大小，或者滚动页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;策略：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;在触发重排动作前，对&lt;code&gt;Dom&lt;/code&gt;进行批量操作。&lt;/li&gt;
  &lt;li&gt;复制节点的属性，在复制的节点里进行操作，在一次交换过来。&lt;/li&gt;
  &lt;li&gt;先用&lt;code&gt;display:none&lt;/code&gt;隐藏节点，再进行大量的操作，再通过&lt;code&gt;display&lt;/code&gt;显示。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多重排文章：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/&quot;&gt;Stoyan Stefanov on Reflow/Repaint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://calendar.perfplanet.com/2009/the-new-game-show-will-it-reflow/&quot;&gt;The new game show: “Will it reflow?”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.browserscope.org/?category=reflow&quot;&gt;Mozilla’s David Baron on Browser Internals for Web Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=a2_6bGNZ7bA&quot;&gt;WebKit blog five-part series on rendering&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;css&quot;&gt;&lt;strong&gt;2.硬件加速css&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;充分利用&lt;code&gt;Css&lt;/code&gt;的&lt;code&gt;transitions&lt;/code&gt;和&lt;code&gt;transforms&lt;/code&gt;达到最优的质量。
这方面主要应用于手机，ios和Android&lt;/p&gt;

&lt;video controls=&quot;&quot; preload=&quot;&quot; autobuffer=&quot;&quot; width=&quot;860&quot; height=&quot;310&quot;&gt;
	&lt;source src=&quot;https://dl.dropboxusercontent.com/u/39519/talks/cssperf/assets/translate3d.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;source src=&quot;https://dl.dropboxusercontent.com/u/39519/talks/cssperf/assets/translate3d.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;css-1&quot;&gt;&lt;strong&gt;3.避免高消耗css&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;@font-face&lt;/li&gt;
  &lt;li&gt;box-shadow&lt;/li&gt;
  &lt;li&gt;opacity compositing&lt;/li&gt;
  &lt;li&gt;gradients&lt;/li&gt;
  &lt;li&gt;text-align&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(这部分待续…)&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;&lt;strong&gt;4.选择器性能&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;浏览器默认是从右到左。&lt;/p&gt;

&lt;p&gt;下面选择器引擎是从左到右：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mootools&lt;/li&gt;
  &lt;li&gt;Sly&lt;/li&gt;
  &lt;li&gt;Peppy&lt;/li&gt;
  &lt;li&gt;Dojo Acme&lt;/li&gt;
  &lt;li&gt;Ext JS&lt;/li&gt;
  &lt;li&gt;Prototype.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是从右到左：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sizzle&lt;/li&gt;
  &lt;li&gt;YUI 3&lt;/li&gt;
  &lt;li&gt;NWMatcher&lt;/li&gt;
  &lt;li&gt;querySelectorAll&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;选择器优化&lt;/p&gt;

&lt;p&gt;推荐组合是：&lt;code&gt;tag .class&lt;/code&gt;，让标签在左边，尽可能让class在右边。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;&lt;strong&gt;5.样式匹配性能&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;关于样式匹配，请看&lt;a href=&quot;http://screwlewse.com/2010/08/different-css-techniques-and-their-performance/&quot;&gt;样式匹配性能&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;polyfills&quot;&gt;&lt;strong&gt;6.Polyfills&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;关于Polyfills的介绍：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Polyfilling 是由 RemySharp 提出的一个术语，它是用来描述复制缺少的 API 和API 功能的行为。你可以使用它编写单独应用的代码而不用担心其他浏览器原生是不是支持。实际上，polyfills并不是新技术也不是和 HTML5 捆绑到一起的。我们已经在如json2.js，ie7-js 和为 IE 浏览器提供透明 PNG支持的JS中使用过了。而和现在 polyfills 的区别就是去年增加的 HTML5 polyfills。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相关信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://selectivizr.com/&quot;&gt;Selectivizr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css3pie.com/&quot;&gt;CSS3Pie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;Modernizr wiki list of polyfills&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;&lt;strong&gt;7.调试&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;主要是手机硬件方面的调试。
相关信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://peter.sh/experiments/chromium-command-line-switches/&quot;&gt;All of Chrome’s command line switches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mir.aculo.us/2011/02/08/visualizing-webkits-hardware-acceleration/&quot;&gt;Thomas Fuchs: Safari and iPhone Simulator CoreAnimation debugging info.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/speed/html5/&quot;&gt;HTML5Rocks: Improving the Performance of your HTML5 App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>译.层叠和选择器的明确度--权重</title>
   <link href="jeffdeng.me/css/2014/12/05/css-specificity-wars"/>
   <updated>2014-12-05T00:00:00+08:00</updated>
   <id>jeffdeng.me/css/2014/12/05/css-specificity-wars</id>
   <content type="html">
&lt;p&gt;这是2005年的文章，内容已经比较老，看看就好。&lt;/p&gt;

&lt;p&gt;在css编码规范中提到：&lt;a href=&quot;http://www.stuffandnonsense.co.uk/archives/css_specificity_wars.html&quot;&gt;层叠和选择器的明确度&lt;/a&gt;，翻译了一下主要的内容，不过建议还是去看原版。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于原作者
Andy Clarke，是一个英国的的设计师，作者，同时是在设计，css和web accessibility方面具有很大热情的演说家。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;整篇文章主要说权重的问题，下面是大家对权重的常规理解：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;id&lt;/code&gt;选择器的权重是 100&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;class&lt;/code&gt;选择器的权重是 10&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;HTML&lt;/code&gt;选择器的权重为 1&lt;/li&gt;
  &lt;li&gt;选择器的权重就是对应数字加起来&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后下面是W3C对权重的解析：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;计算选择器中的&lt;code&gt;id&lt;/code&gt;数量（=a）&lt;/li&gt;
  &lt;li&gt;计算选择器中属性和&lt;code&gt;class&lt;/code&gt;的数量（=b）&lt;/li&gt;
  &lt;li&gt;计算选择器中元素的数量（=c）&lt;/li&gt;
  &lt;li&gt;然后把这些数字按a-b-c连起来，abc就是这个选择器的权重&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后下面是作者的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;元素选择器权重 0，0，1&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;class&lt;/code&gt;选择器权重 0，1，0&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;id&lt;/code&gt;选择器权重 1，0，0&lt;/li&gt;
  &lt;li&gt;然后把对应选择器的数字按对应的位置加起来就是权重&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;感觉3种方法都差不多，只要能正确判断，哪一种都可以。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>前端编码规范（2）-- css</title>
   <link href="jeffdeng.me/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/2014/12/05/code-standers-2"/>
   <updated>2014-12-05T00:00:00+08:00</updated>
   <id>jeffdeng.me/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/2014/12/05/code-standers-2</id>
   <content type="html">
&lt;p&gt;接着之前，再来看看css的编码规范。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;&lt;strong&gt;编码总原则&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;从外部文件加载&lt;code&gt;CSS&lt;/code&gt;，尽可能减少文件数。加载标签必须放在文件的 &lt;code&gt;HEAD&lt;/code&gt; 部分。&lt;/li&gt;
  &lt;li&gt;用 &lt;code&gt;LINK&lt;/code&gt; 标签加载，永远不要用&lt;code&gt;@import&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;不要在文件中用内联式引入的样式，不管它是定义在样式标签里还是直接定义在元素上。这样会很难追踪样式规则。&lt;/li&gt;
  &lt;li&gt;使用 &lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;normalize.css&lt;/a&gt; 让渲染效果在不同浏览器中更一致。&lt;/li&gt;
  &lt;li&gt;使用类似 &lt;a href=&quot;http://yui.github.io/yui2/&quot;&gt;YUI fonts.css&lt;/a&gt; 的字体规格化文件。&lt;/li&gt;
  &lt;li&gt;理解 &lt;a href=&quot;http://www.stuffandnonsense.co.uk/archives/css_specificity_wars.html&quot;&gt;层叠和选择器的明确度&lt;/a&gt; &lt;a href=&quot;/2014/12/05/css-specificity-wars.html&quot;&gt;(翻译)&lt;/a&gt; ，这样你就可以写出非常简洁且高效的代码。&lt;/li&gt;
  &lt;li&gt;编写性能优化的选择器。尽可能避免使用开销大的&lt;code&gt;CSS&lt;/code&gt;选择器。例如，避免 &lt;code&gt;*&lt;/code&gt; 通配符选择器，也不要叠加限定条件到 &lt;code&gt;ID&lt;/code&gt; 选择器（例如 &lt;code&gt;div#myid&lt;/code&gt;）或 &lt;code&gt;class&lt;/code&gt; 选择器（例如 &lt;code&gt;table.results&lt;/code&gt;）上。这对于速度至上并包含了成千上万个&lt;code&gt;DOM&lt;/code&gt;元素的web应用来说尤为重要。更多相关内容请参阅 MDN 上的这篇 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Writing_efficient_CSS&quot;&gt;《编写高效CSS》&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;css&quot;&gt;&lt;strong&gt;CSS盒子模型&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;6&quot; alt=&quot;css-box-model&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;css-&quot;&gt;&lt;strong&gt;CSS 格式&lt;/strong&gt;&lt;/h2&gt;

</content>
 </entry>
 
 <entry>
   <title>前端编码规范（1）-- html</title>
   <link href="jeffdeng.me/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/2014/12/04/code-standers-1"/>
   <updated>2014-12-04T00:00:00+08:00</updated>
   <id>jeffdeng.me/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/2014/12/04/code-standers-1</id>
   <content type="html">
&lt;p&gt;搞前端也挺久了，但代码一直没有规范的写，都是随心所欲，爱咋咋地。最近QL师兄丢了网站过来，真心给力，前端的都可以去看看。&lt;a href=&quot;http://coderlmn.github.io/code-standards/&quot;&gt;isobar编码规范&lt;/a&gt;。下面把一些我认为比较重要的copy出来。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;&lt;strong&gt;前端开发核心思想&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;表现、内容和行为的分离。&lt;/li&gt;
  &lt;li&gt;标记应该是结构良好、语义正确 以及 普遍合法 。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Javascript&lt;/code&gt;应该起到渐进式增强用户体验的作用 。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;&lt;strong&gt;总体原则&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;缩进&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;对于所有编程语言，要求缩进必须是软&lt;code&gt;tab&lt;/code&gt;（用空格字符）。在文本编辑器里敲 &lt;code&gt;Tab&lt;/code&gt; 应该等于 4个空格 。&lt;/p&gt;

&lt;h3 id=&quot;vs-&quot;&gt;&lt;strong&gt;可读性 vs 压缩&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;对于维护现有文件，认为可读性比节省文件大小更重要。大量空白和适当的&lt;code&gt;ASCII&lt;/code&gt;艺术都是受鼓励的。任何开发者都不必故意去压缩&lt;code&gt;HTML&lt;/code&gt;或&lt;code&gt;CSS&lt;/code&gt;，也不必把&lt;code&gt;Javascript&lt;/code&gt;代码最小化得面目全非。&lt;/p&gt;

&lt;p&gt;会在服务器端或&lt;code&gt;build&lt;/code&gt;过程中自动最小化并&lt;code&gt;gzip&lt;/code&gt;压缩所有的静态客户端文件，例如&lt;code&gt;CSS&lt;/code&gt;和&lt;code&gt;JS&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;doctype&quot;&gt;&lt;strong&gt;Doctype&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;使用合适的&lt;code&gt;Doctype&lt;/code&gt;来指示浏览器触发标准模式. 永远要避免&lt;code&gt;Quirks&lt;/code&gt;模式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;strong&gt;字符编码&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-4&quot;&gt;&lt;strong&gt;属性加引号&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;HTML5&lt;/code&gt;规范里并没有严格要求属性值两边加引号。但考虑到一些属性可以接受空白值，为了保持一致性，所有属性值必须加上引号。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;&lt;strong&gt;标签的总体原则&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在创建的&lt;code&gt;HTML&lt;/code&gt;文档里总是要使用能够代表内容语义的标签。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;段落分隔符要使用实际对应的&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;元素，而不是用多个&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;标签。&lt;/li&gt;
  &lt;li&gt;在合适的条件下，充分利用&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; （定义列表）和&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; 标签。&lt;/li&gt;
  &lt;li&gt;列表中的条目必须总是放置于&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; 中，永远不要用一组 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 来表示。&lt;/li&gt;
  &lt;li&gt;给每个表单里的字段加上 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 标签，其中的 &lt;code&gt;for&lt;/code&gt;属性必须和对应的输入字段对应，这样用户就可以点击标签。同理，给标签加上 &lt;code&gt;cursor:pointer&lt;/code&gt;; 样式也是明智的做法。&lt;/li&gt;
  &lt;li&gt;在某些闭合的 &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;标签旁边加上一段&lt;code&gt;html&lt;/code&gt;注释，说明这里闭合的是什么元素。这在有大量嵌套和缩进的情况下会很有用。&lt;/li&gt;
  &lt;li&gt;不要把表格用于页面布局。&lt;/li&gt;
  &lt;li&gt;在合适的条件下，利用 &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;标签.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面贴上&lt;a href=&quot;http://html5boilerplate.com&quot;&gt;html5-boilerplate&lt;/a&gt;的标准首页。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!--[if lt IE 7]&amp;gt;      &amp;lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&amp;gt; &amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if IE 7]&amp;gt;         &amp;lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&amp;gt; &amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if IE 8]&amp;gt;         &amp;lt;html class=&quot;no-js lt-ie9&quot;&amp;gt; &amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if gt IE 8]&amp;gt;&amp;lt;!--&amp;gt; &amp;lt;html class=&quot;no-js&quot;&amp;gt; &amp;lt;!--&amp;lt;![endif]--&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
        &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
        &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
        &amp;lt;meta name=&quot;description&quot; content=&quot;&quot;&amp;gt;
        &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;

        &amp;lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&amp;gt;

        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&amp;gt;
        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&amp;gt;
        &amp;lt;script src=&quot;js/vendor/modernizr-2.6.2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!--[if lt IE 7]&amp;gt;
            &amp;lt;p class=&quot;browsehappy&quot;&amp;gt;You are using an &amp;lt;strong&amp;gt;outdated&amp;lt;/strong&amp;gt; browser. Please &amp;lt;a href=&quot;http://browsehappy.com/&quot;&amp;gt;upgrade your browser&amp;lt;/a&amp;gt; to improve your experience.&amp;lt;/p&amp;gt;
        &amp;lt;![endif]--&amp;gt;

        &amp;lt;!-- Add your site or application content here --&amp;gt;
        &amp;lt;p&amp;gt;Hello world! This is HTML5 Boilerplate.&amp;lt;/p&amp;gt;

        &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script src=&quot;js/vendor/jquery-1.10.2.min.js&quot;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt;
        &amp;lt;script src=&quot;js/plugins.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src=&quot;js/main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

        &amp;lt;!-- Google Analytics: change UA-XXXXX-X to be your site&#39;s ID. --&amp;gt;
        &amp;lt;script&amp;gt;
            (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
            e=o.createElement(i);r=o.getElementsByTagName(i)[0];
            e.src=&#39;//www.google-analytics.com/analytics.js&#39;;
            r.parentNode.insertBefore(e,r)}(window,document,&#39;script&#39;,&#39;ga&#39;));
            ga(&#39;create&#39;,&#39;UA-XXXXX-X&#39;);ga(&#39;send&#39;,&#39;pageview&#39;);
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以根据自己的需要去更改了。当然，前提你得先有一份boilerplate的源码。&lt;/p&gt;

&lt;p&gt;总是使用能够代表内容语义的标签是比较重要的，从以前的&lt;code&gt;table&lt;/code&gt;布局到现在&lt;code&gt;div&lt;/code&gt;+&lt;code&gt;css&lt;/code&gt;布局，这是始终如一的，不能盲目的堆叠&lt;code&gt;div&lt;/code&gt;之类的标签。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>express的诡异错误</title>
   <link href="jeffdeng.me/nodejs/2014/12/03/express-fail"/>
   <updated>2014-12-03T00:00:00+08:00</updated>
   <id>jeffdeng.me/nodejs/2014/12/03/express-fail</id>
   <content type="html">
&lt;p&gt;最近用 &lt;code&gt;express&lt;/code&gt; 新建项目，发现一个很诡异的问题，出现的简直毫无理由。我的exprss 版本是&lt;code&gt;4.9.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先看 &lt;code&gt;express&lt;/code&gt; 的参数使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;express -h

Usage: express [options] [dir]

Options:

-h, --help          output usage information
-V, --version       output the version number
-e, --ejs           add ejs engine support (defaults to jade)
    --hbs           add handlebars engine support
-H, --hogan         add hogan.js engine support
-c, --css &amp;lt;engine&amp;gt;  add stylesheet &amp;lt;engine&amp;gt; support (less|stylus|compass) (defaults to plain css)
-f, --force         force on non-empty directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新建项目，用 &lt;code&gt;ejs&lt;/code&gt; 和 &lt;code&gt;sass&lt;/code&gt; 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;express -e -c compass test

create : test
create : test/package.json
create : test/app.js
create : test/public
create : test/public/javascripts
create : test/public/images
create : test/public/stylesheets
create : test/public/stylesheets/style.scss
create : test/routes
create : test/routes/index.js
create : test/routes/users.js
create : test/views
create : test/views/index.ejs
create : test/views/error.ejs
create : test/bin
create : test/bin/www

install dependencies:
  $ cd test &amp;amp;&amp;amp; npm install

run the app:
  $ DEBUG=test ./bin/www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt; 后，执行 &lt;code&gt;DEBUG=test ./bin/www&lt;/code&gt; ,现在还是ok的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; test Express server listening on port 3000 +0ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用浏览器打开 &lt;code&gt;http://localhost:3000/&lt;/code&gt;, 问题来了：&lt;/p&gt;

&lt;p&gt;首先是浏览器报错：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/QQ20141203-1.png&quot; alt=&quot;chrome-err&quot; /&gt;&lt;/p&gt;

&lt;p&gt;错误信息是：&lt;code&gt;(failed) net::ERR_CONNECTION_REFUSED&lt;/code&gt; ，其实应该报404错误，因为没有这个样式文件。然后这个时候，控制台也会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  test Express server listening on port 3000 +0ms
GET / 200 77.090 ms - 207

events.js:72
        throw er; // Unhandled &#39;error&#39; event
              ^
Error: spawn ENOENT
    at errnoException (child_process.js:1001:11)
    at Process.ChildProcess._handle.onexit (child_process.js:792:34)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关键是我只是初始化了项目，代码完全没有改过。&lt;/p&gt;

&lt;p&gt;其实问题出在 &lt;code&gt;node-compass&lt;/code&gt; 模块,可以查看github上的用法说明 &lt;a href=&quot;https://github.com/nathggns/node-compass&quot;&gt;node-compass&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;node-compass requires the compass ruby gem in order to compile compass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先你的项目要安装ruby， 然后安装 compass。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem update --system
$ gem install compass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好吧，其实是小问题，只是没想通。囧~&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>2014年目标，计划</title>
   <link href="jeffdeng.me/plan/2014/02/20/plan"/>
   <updated>2014-02-20T00:00:00+08:00</updated>
   <id>jeffdeng.me/plan/2014/02/20/plan</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;p&gt;注：原文发布于豆瓣上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前言：之前文章一直发在技术blog，不过最近非技术文章比较多，发了几篇觉得发不下去了。所以就来了豆瓣。都是生活中琐碎的事，看了就忘了吧。&lt;/p&gt;

&lt;p&gt;原来一个人的目标真的会随着时间的推进而改变，而且周期还是，如此快。&lt;/p&gt;

&lt;p&gt;新年时，我的愿望是，或者目标是：换mx3，买kindle，买台1500左右的山地车，买台mac pro，去海南环岛。我不知道怎样的才算是愿望，或者是一瞬间的想法，又或者是蓄谋已久的意向。上面这些应该都是一瞬间的吧，因为在这一瞬间，对上面那些的欲望，说真的，不是很强。&lt;/p&gt;

&lt;p&gt;好吧，那新的愿望或者计划是什么呢。&lt;/p&gt;

&lt;p&gt;让我先酝酿下。好像，我一生还没有奋斗过，为着某个目标。高一时英语课听写单词，每组一个代表，而我，就是我们组的代表。原谅我那惨不忍睹的记忆力，我一个都没写出来，导致最直接的结果是，我们组输了。恩，然后全组人一起唱了首歌。下课后，同桌A在那里抱怨，你怎么这么差劲！搞的我们组输了，还要被罚唱歌。哦，原来我和A同桌过，如果不是因为这件事我还不记得呢。然后我沉默不语。这时坐我前面的语代，一个很萝莉的女生为我打抱不平说，其实我也很努力了，不要怪他。有句话说的很对，自己的情况自己最清楚。我当时是懒得记单词，所以才一个都没写出来。有人为我打抱不平真的让我羞愧不已。然后暗自下决心，我一定要认真学好英语！事实证明，我第二天又恢复原样了。因为，我睡了一觉。一般我睡了一觉很多东西都选择性遗忘。&lt;/p&gt;

&lt;p&gt;高三时，补课，上化学课。当时代课老师是号称学校四大恶人之一的阿蔡。当然，之前我并没有上过他的课。我对他的所有印象都来源于同学。某天自习课，他路过教室，看到窗边一同学玩手机，一把拉开窗跳讲去把手机抢了，还把那同学臭骂一顿。还有把女同学骂哭是经常的事。所有当时我上他的课都小心翼翼的。刚好那一周我坐第一排，然后他就点了我上去做题目，好像是划分物质的类别。当时我就蒙了，上去乱写一通。然后他讲评的时候，就在重复一句话，“又错了！”“又错了！”当时我觉得这也算是一场耻辱吧，学生时代的耻辱！然后我发奋，我一定会学会化学的！然后第二天，又打回原样了。因为，我睡了一觉~&lt;/p&gt;

&lt;p&gt;还有就是高三寒假，我背了好多书回去，想着最后一个寒假了，要好好努力。结果，你知道的，不断的睡觉……&lt;/p&gt;

&lt;p&gt;恩，扯了这么多无关紧要的事。就是想说明一个问题，对于我很严重的问题：我真的没有为什么奋斗过。某天晚上睡觉的时候，在想，如果明天是最后一天，我最后悔的是什么。当时想的是，啊，原来自己都没有奋斗过。这算是人生的一大遗憾吧。&lt;/p&gt;

&lt;p&gt;恩，这算是这段时间的一个目标。因为大三下学期，很多东西，不努力就要难过了。&lt;/p&gt;

&lt;p&gt;努力什么呢。吃饭？睡觉？恩，这是一点。吃好饭睡好觉才有饱满的精神去奋斗。虽然不知道将来的定位，但什么都学点吧。毕竟是有兴趣。技术这些东西，时刻都有新的，应该不会无聊吧。老爸老妈说公务员好，去考！但我是很讨厌公务员的生活啊。没办法，至少现在的我是这样想的。&lt;/p&gt;

&lt;p&gt;恩，学多点东西，锻炼身体。三月份有个百公里，虽然基友一直不建议我去，但还是想尝试下。毕竟，很多东西不去尝试，那根本不知道怎么回事。&lt;/p&gt;

&lt;p&gt;恩，扯远了。&lt;/p&gt;

&lt;p&gt;之前的我，考虑问题更多的是在考虑自己。突然想到父母老了啊，自己好像很少从父母的角度思考。我这样的年纪，父母肯定是担心我找不到好工作吧。以前说奋斗，说努力，总是睡一觉就过去了。之前总是认为如果某件事刺激我，那我肯定会奋发的。现在想着，最好没有这样的事情。努力无论什么时候都是自己的事，外物只是有时候有点推动作用而已。努力学好想学的东西然后找到好工作。&lt;/p&gt;

&lt;p&gt;恩，挺好的。努力吧。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="jeffdeng.me/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>jeffdeng.me/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
